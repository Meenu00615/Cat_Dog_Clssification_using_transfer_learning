# -*- coding: utf-8 -*-
"""Cat_Dog_Clssification_using_transfer_learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-t2GyHp6I3mC5xE6Vvev-wtZ-HIghRDi
"""

!pip install kaggle
#dataset from kaggle

#kaggle competitions download -c dogs-vs-cats - dataset
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

#Now importing the cats vs dogs dataset
!kaggle competitions download -c dogs-vs-cats

!ls

from zipfile import ZipFile  # extracting the zip file

dataset='/content/dogs-vs-cats.zip'

with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print("Now the data is fully extracted!")

dataset='/content/train.zip'

with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  print("Train zip is extracted")

import os
#Now counting the number of the file
path, dirs, files = next(os.walk('/content/train'))
file_count=len(files)
print('Number of images:', file_count)

#printing the name of the images
file_names=os.listdir('/content/train')
print(file_names)

import numpy as np
import PIL as Image
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from google.colab.patches import cv2_imshow

img=mpimg.imread('/content/train/cat.1.jpg')
imgplt=plt.imshow(img)
plt.show()   #I've found that this cat images is not related to the cage

img=mpimg.imread('/content/train/dog.9210.jpg')
imgplt=plt.imshow(img)
plt.show()

"""###***Resizing all the dataset images***"""

#We have total 25000 images in the dataset
#Applying loop mathod

file_names=os.listdir('/content/train')
for i in range(5):
  name=file_names[i]
  print(name[0:3])

file_names=os.listdir('/content/train')
dog_count=0
cat_count=0
for img_file in file_names:
  name=img_file[0:3]

  if name=='dog':
    dog_count+=1
  else:
    cat_count+=1
#from this loop statement we can see that, it provided us the number of the dog and cat
print("Number of the dog:", dog_count)
print("Number of the cat:", cat_count)

#resizing all the images in the dataset
os.mkdir('/content/resized_images/')

from PIL import Image

original_folder='/content/train/'
resized_folder='/content/resized_images/'

for i in range(2000):
  filename=os.listdir(original_folder)[i]
  img_path=original_folder+filename

  img=Image.open(img_path)
  img=img.resize((224, 224))
  img=img.convert('RGB')
  newImgPath=resized_folder+filename
  img.save(newImgPath)

img=mpimg.imread('/content/resized_images/cat.1004.jpg')
imgplt=plt.imshow(img)
plt.show()

"""img=mpimg.imread('/content/resized_images/cat.1001.jpg')
imgplt=plt.imshow(img)
plt.show()

###***Labelling the dog and cat resized images group:***
###1. cat-0
###2. dog-1
"""

filenames=os.listdir('/content/resized_images')
labels=[]
for i in range(2000):

  file_name=filenames[i]
  label=file_name[0:3]

  if label=='dog':
    labels.append(1)

  else:
    labels.append(0)     #labels

print(filenames[0:5])
print(len(filenames))

print(labels[0:5]) #labelling of the images
#verifing that labelling is done right or not
#all labelling are correct
print(len(labels))
#checking the length of the labels

#Now
values, counts=np.unique(labels, return_counts=True)
print(values)
print(counts)

#Now converting all the resized images into the numpy array
import cv2
import glob   #file path expansion using glob

"""###***Don't forget to add the / in the ebd of the directory path end***"""

img_directory='/content/resized_images/'     #dont forget to add / in directory path end, otherwise it will show the empty directory and shape(0, )
img_extension=['png', 'jpg']
 #empty list called as file and dimensioning the dot extend file
files=[]
[files.extend(glob.glob(img_directory + '*.' + e)) for e in img_extension]

dog_cat_images=np.asarray([cv2.imread(file) for file in files])

print(dog_cat_images)

type(dog_cat_images)

print(dog_cat_images.shape)

X=dog_cat_images
Y=np.asarray(labels)

"""###***Training and spliting data***"""

X_train, X_test, Y_train, Y_test=train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

#Training Images-1600
#testing Images-400

#scaling all the images into 0-1 and pixel value range 0-255(Black-White)

X_train_scaled=X_train/255

X_test_scaled=X_test/255

print(X_train_scaled)



num_of_classes=2

import tensorflow as tf
import tensorflow_hub as hub

mobilenet_model='https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4'
pretrained_model=hub.KerasLayer(mobilenet_model, input_shape=(244, 244, 3), trainable=False)

import tensorflow as tf

# Assuming your input_images have shape (None, 244, 244, 3)
resized_images = tf.image.resize(dog_cat_images, (224, 224))

from keras.layers import Dense, Activation, Dropout, Conv2D, MaxPooling2D, Flatten

pretrained_model.compute_output_shape((None, 224, 224, 3))



pretrained_model = tf.keras.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(num_of_classes)
])

pretrained_model.summary()

#compiling the model and implementing the loss function
pretrained_model.compile(
    optimizer='adam',
    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
    metrics=['acc']
)

pretrained_model.fit(X_train_scaled, Y_train, epochs=10)

# prompt: To decrease the loss function

#pretrained_model.fit(X_train_scaled, Y_train, epochs=15)

score, acc = pretrained_model.evaluate(X_test_scaled, Y_test)
print('Test Loss :', score)
print('Test Accuracy:', acc)

#Predictive System
import cv2
input_image_path=input('Path of the image to be predicted:')
input_image=cv2.imread(input_image_path)
cv2_imshow(input_image)
input_image_resize=cv2.resize(input_image, (224, 224))
input_image_scaled=input_image_resize/255
image_reshaped=np.reshape(input_image_scaled, [1, 224, 224, 3])
input_prediction=pretrained_model.predict(image_reshaped)
print(input_prediction)
input_pred_label=np.argmax(input_prediction)
print(input_pred_label)
if input_pred_label ==0:
  print('The image represents a Cat:')

else:
  print('The image represent a Dog.')

#All the prediction are correct for images path by the different websites: /content/Cat.jpg  /content/Ldog 3.jpg  /content/Dog 1.jpg

#Building an simple UI-User zinterface in streamlet or flask and deploing this model

#Pillow Library for importing the image

from PIL import Image

#Open the image file
image = Image.open("/content/dog_image_result.png")


image

[0.85], 0.15